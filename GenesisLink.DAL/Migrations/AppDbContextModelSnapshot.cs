// <auto-generated />
using System;
using GenesisLink.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GenesisLink.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GenesisLink.BOL.MarketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LastKnownPrice")
                        .HasColumnType("Numeric(10,2)");

                    b.Property<string>("Symbol")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("Numeric(10,0)");

                    b.HasKey("Id");

                    b.ToTable("MarketData");
                });

            modelBuilder.Entity("GenesisLink.BOL.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Numeric(10,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationWalletAddress")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("SourceWalletAddress")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("TransactionMessage")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GenesisLink.BOL.UserMarketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MarketDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("Id");

                    b.HasIndex("MarketDataId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMarketData");
                });

            modelBuilder.Entity("GenesisLink.BOL.UserWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("UserWallets");
                });

            modelBuilder.Entity("GenesisLink.BOL.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("Numeric(10,2)");

                    b.Property<string>("ChainSource")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<string>("WalletName")
                        .HasColumnType("NVARCHAR(450)");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c8c22ff3-b9dd-4dbd-84bc-6999d841e8a5",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "01e6d854-ccbd-4dd6-9f14-823e56686e52",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GenesisLink.BOL.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("City")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("CreatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("State")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("NVARCHAR(450)");

                    b.Property<DateTime?>("UpdatedTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("VARCHAR(50)");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("GenesisLink.BOL.Transaction", b =>
                {
                    b.HasOne("GenesisLink.BOL.AppUser", "AppUserNav")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppUserNav");
                });

            modelBuilder.Entity("GenesisLink.BOL.UserMarketData", b =>
                {
                    b.HasOne("GenesisLink.BOL.MarketData", "MarketDataNav")
                        .WithMany()
                        .HasForeignKey("MarketDataId");

                    b.HasOne("GenesisLink.BOL.AppUser", "AppUserNav")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppUserNav");

                    b.Navigation("MarketDataNav");
                });

            modelBuilder.Entity("GenesisLink.BOL.UserWallet", b =>
                {
                    b.HasOne("GenesisLink.BOL.AppUser", "AppUserNav")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("GenesisLink.BOL.Wallet", "WalletNav")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("AppUserNav");

                    b.Navigation("WalletNav");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenesisLink.BOL.AppUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("GenesisLink.BOL.AppUser", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
